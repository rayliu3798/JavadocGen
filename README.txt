Project: Javadoc Generator
Author: Zhuohao Liu(Ray)

What I have achieved:

Short version: generate java documentation from .java program.
Longer version:
1. Wrote a .gr grammar file to parse the Java file with gratr. (java.gr). The grammar is able to parse java file that satisfies: a package declaration, multiple imports declaration, one class, one constructor and multiple methods, where there must be no contents inside the constructor and methods.
2. Extract data from parsed data structure.
3. Construct .html java documentation using the framework generated by the linux command.
4. Output java documentation and stylesheet.css (make the web page look prettier).
   2-4 : javadoc.agda


To test the code:
Run javadoc.exe (already in the project directory) on a well-documented .java file. Make sure the file satisfy the requirement mentioned above (in 1) and there is no content inside the constructors and methods.
To get javadoc.exe: run 'gratr' on java.gr, which generates java.agda, java-main.agda, java-types.agda; compile javadoc.agda. Make sure Stylesheet.agda is in the same directory because javadoc.agda imports it.
Ex: Using the Inventory.java file, using command 'Javadoc Inventory.java' which will generate 'Inventory.html'.

Sample input and output:
Input: Inventory.java
Output: Inventory.html stylesheet.css

Pointers to some functions:
1. get-description-comment: get the string inside the comment (inside/** */) and concatenate them with line breakers, note that only descriptions are concatenated, other types of comment like '@see' or '@author' are ignored. This is used to show the description of the class/constructors/methods.
2. heading, navibar, constructorSummary, methodSummary, constructorDetail, methodDetail, bottomNavibar are the functions that output the strings representing the html file, each deal with the self-explanatory components.
3. process-strt take strt as input and put all the components above together.
4. writeToFiles output .html file
5. writeStylesheet output stylesheet.css
6. process calls writeToFiles and writeStylesheet using IO monad.


Problems encountered:
When I tried to write a grammar for multiple constructors within a class, I was not able to make it work, the reason being that the way I define my constructors and methods are very similar and the gratr cannot distinguish them, resulting in infinite loop.
